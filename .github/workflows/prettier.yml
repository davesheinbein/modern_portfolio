name: Prettier # Name of the workflow

on:
  push: # Triggers the workflow on push events
    branches:
      - main # Include the main branch
      - develop # Include the develop branch
      - staging # Include the staging branch
      - master # Include the master branch
  pull_request: # Triggers the workflow on pull request events
    branches:
      - main # Include the main branch
      - develop # Include the develop branch
      - staging # Include the staging branch
      - master # Include the master branch
  workflow_dispatch: # Allows manual triggering of the workflow from the GitHub Actions tab

jobs:
  format: # Define a job named "format"
    runs-on: ubuntu-latest # Specifies the environment to run the job on
    permissions:
      contents: write # Allow write access to the repository contents
      workflows: write # Allow modifying workflow files

    steps: # Define the sequence of steps for the job
      - name: Checkout code # Step to check out the repository's code
        uses: actions/checkout@v3 # Use the latest version of the checkout action

      - name: Set up Node.js # Step to set up the Node.js environment
        uses: actions/setup-node@v3 # Use the latest version of the setup-node action
        with:
          node-version: '16' # Specify the Node.js version to use for the job

      - name: Install dependencies # Step to install project dependencies
        run: npm install # Runs npm install to install dependencies listed in package.json

      - name: Run Prettier # Step to run Prettier for code formatting
        run: npx prettier --write . # Run Prettier with the --write option to automatically format the code

      - name: Commit and push changes # Step to commit and push changes
        run: |
          git config --local user.name "github-actions[bot]"  # Configure Git user name
          git config --local user.email "github-actions[bot]@users.noreply.github.com"  # Configure Git user email
          git add .  # Stage all changes
          if ! git diff-index --quiet HEAD; then  # Check if there are changes
            git commit -m "chore: format code with Prettier"  # Commit changes if there are any
            git push origin HEAD  # Push changes to the current branch
          else
            echo "No changes to commit"  # Output message if there are no changes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token for authentication
